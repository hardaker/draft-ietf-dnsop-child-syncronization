<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1034 PUBLIC '' 'reference.RFC.1034.xml'>
  <!ENTITY rfc1982 PUBLIC '' 'reference.RFC.1982.xml'>
  <!ENTITY rfc3597 PUBLIC '' 'reference.RFC.3597.xml'>
  <!ENTITY I-D.kumari-ogud-dnsop-cds SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.kumari-ogud-dnsop-cds.xml">
]>
<?rfc strict="yes" ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc symrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" ipr="trust200902" docName="draft-ietf-dnsop-child-syncronization-FILLVERSION">
    <front>
    <title abbrev="Child To Parent Synchronization in DNS">
      Child To Parent Synchronization in DNS
    </title>
    <author initials="W.H." surname="Hardaker" fullname="Wes Hardaker">
      <organization>Parsons, Inc.</organization>
      <address>
	<postal>
	  <street>P.O. Box 382</street>
	  <city>Davis</city>
	  <region>CA</region>
	  <code>95617</code>
	  <country>US</country>
	</postal>
	<phone>+1 530 792 1913</phone>
        <email>ietf@hardakers.net</email>
      </address>
    </author>
    <date month="FILLMONTH" year="FILLYEAR"/>
    <area>Operations and Management</area>
    <workgroup>DNSOP</workgroup>
    <!--
    <keyword ...>
    <keyword ...>
    -->
    <abstract>
      <t>This document specifies how a child zone in the DNS can
      publish a record to indicate to a parental agent that it may
      copy and process certain records from the child zone.  The
      existence and change of the record may be monitored by a
      parental agent, after which the parent may act on the data
      appropriately.</t>
    </abstract>
    <!--
    <note ...>
    -->
  </front>

  <middle>
    <section title="Introduction">

      <t>This document specifies how a child zone in the DNS can
      publish a record to indicate to a parental agent that it may
      copy and process certain records from the child zone.  The
      existence and change of the record may be monitored by a
      parental agent, after which the parent may act on the data
      appropriately.</t>

      <t>Some resource records (RRs) in a parent zone are typically
      expected to be in-sync with the source data in the child's zone.
      The most common records, to date, that should match are the
      nameserver (NS) records and any necessary associated address
      "glue" records (A and AAAA).  These records are referred to as
      "delegation records".</t>

      <t>It has been traditionally challenging for child DNS operators to update
      their delegation records within the parent's set in a timely
      fashion.  This difficulty is frequently from simple operator
      laziness or because of the complexities of maintaining a large
      number of DNS zones.  Having an automated mechanism for
      signaling updates will greatly ease the child zone operator's
      maintenance burden and improve the robustness of the DNS as a
      whole.</t>

      <t>This draft introduces a new RR type (RRType) named "CSYNC"
      that indicates which delegation records published by a child DNS operator
      should be processed by a parental agent and used to update the
      parent zone's DNS data.</t>

      <t>This specification was not designed to synchronize DNSSEC
      security records, such as DS RRsets. For such a solution, see
      the complimentary solution <xref
      target="I-D.kumari-ogud-dnsop-cds" /> for maintaining security
      delegation information. In addition, this specification does not
      address how to perform bootstrapping operations, including to
      get the required initial DNSSEC-secured operating environment in
      place.</t>

      <section title="Terminology Used in This Document" anchor="musts">
	<t>The terminology used in this document is defined in this section.</t>

        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	  "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
	  and "OPTIONAL" in this document are to be interpreted as
	  described in <xref target="RFC2119"/>.</t>

	<t>Terminology describing relationships between the
	interacting roles involved in this document are defined in
	the following list: 

	<list style="hanging">
		<t hangText="Child:">  The entity on record that has the delegation of the domain
		from the parent</t>

		<t hangText="Parent:">  The domain in which the child is registered</t>

		<t hangText="Child DNS operator:">  The entity that maintains and publishes the
		zone information for the child DNS</t>

		<t hangText="Parental agent:">  The entity that the child has relationship with,
		to change its delegation information</t>

        </list>
	</t>
      </section>
    </section>

    <section title="Definition of the CSYNC RRType">
      <t>The CSYNC RRType contains, in its RDATA component, these
      parts: an SOA serial number, a set of flags and a simple
      bit-list indicating the DNS RRTypes in the child that should be
      processed by the parental agent in order to modify the DNS
      delegation records for the child DNS operator within the parent's zone.
      Child DNS operators wanting a parental agent to perform the
      synchronization steps outlined in this document MUST publish a
      CSYNC record at the apex of the child zone.  parental agent
      implementations MAY choose to query child zones for this record
      and process DNS record data as indicated by the Type Bit Map
      field in the RDATA of the CSYNC record.  How the data is
      processed is described later in Section <xref
      target="data_processing" />.</t>
      
      <t>Parental agents MUST process the entire set of child data
      indicated by the Type Bit Map field (i.e., all record types
      indicated along with all of the necessary records to support
      processing of that type) or else parental agents MUST NOT make
      any changes to parental records at all.  Errors due to
      unsupported Type Bit Map bits or otherwise nonpunishable data
      SHALL result in no change to the parent zone's delegation
      information for the Child.  Parental agents MUST ignore a
      Child's CSYNC RDATA set if multiple CSYNC resource records are
      found; only a single CSYNC record should ever be expected.</t>

      <t>The parental agent MUST perform DNSSEC validation of the
      CSYNC RRType data and MUST perform DNSSEC validation of any data
      to be copied from the Child to the Parent.  Parents MUST not
      process any data from any of these records if any of the
      validation results indicate any anything other than "Secure"
      <xref target="RFC4034" />.</t>

      <section title="The CSYNC Resource Record Format">
	<section title="The CSYNC Resource Record Wire Format">
	<t>The CSYNC RDATA consists of the following fields:</t>
<figure>
<artwork>
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          SOA Serial                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Flags                   |            Type Bit Map       /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                     Type Bit Map (continued)                  /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

        <section title="The SOA Serial Field">
	  <t>The SOA Serial field contains a copy of the 32-bit SOA serial
	  number from the child zone.  If the value is non-zero,
	  parental agents querying children's authoritative servers
	  MUST NOT act on data from zones advertising an SOA serial
	  number less than this value.  A special value of 0 indicates
	  that no such restriction is in place.</t>

	  <t>Note that a child zone's current SOA serial number may be
	  greater than the number indicated by the CSYNC record.  A
	  child SHOULD update the SOA Serial field in the CSYNC record
	  every time the data being referenced by the CSYNC record is
	  changed (e.g. an NS record or associated address record is
	  changed).  A child MAY choose to update the SOA Serial field
	  to always match the current SOA serial field.</t>
	  
	  <t>Parental agents MAY cache SOA serial numbers from
	  data they use and refuse to process data from zones older
	  than the last instance they pulled data from.</t>
	</section>
	<section title="The Flags Field">
	  <t>The Flags field contains 16 bits of flags defining
	  operations that affect the processing of the CSYNC record.
	  The flags defined in this document are as follows:
	  <list>
	    <t>0x00 0x01: "immediate"</t>
	  </list>
	  </t>
	  <t>The definitions for how the flags are to be used can be
	  found later in Section <xref target="data_processing" />.</t>

	  <t>The remaining flags are reserved for use by future
	  specifications.  Undefined flags MUST be set to 0 by CSYNC
	  publishers.  Parental agents MUST NOT process a CSYNC record
	  if it contains a 1 value for a flag that is unknown to or
	  unsupported by the parental agent.</t>

        <section title="The Type Bit Map Field">
	  <t>The Type Bit Map field indicates the record types to be
	  processed by the parental agent, according to the procedures
	  in Section <xref target="data_processing" />.  The Type Bit
	  Map field is encoded in the same way as the Type Bit Maps
	  field of the NSEC record, described in <xref
	  target="RFC4034" />, Section 4.1.2. If a bit has been set
	  that a parental agent implementation does not understand,
	  the parental agent MUST NOT act upon the record.
	  Specifically: a parental agent must not copy data blindly;
	  An IETF proposed (or higher) standard specification must
	  exist that defines how the data should be processed for a
	  given bit.</t>
	</section>
	</section>
	</section>
      <section title="The CSYNC Presentation Format">
	<t>The CSYNC presentation format is as follows:
	<list>
	  <t>The SOA Serial field is represented as an integer.</t>
	  <t>The Flags field is represented as an integer.</t>
	  <t>The Type Bit Map field is represented as a sequence of RR
	  type mnemonics.  When the mnemonic is not known, the TYPE
	  representation described in <xref target="RFC3597" />,
	  Section 5, MUST be used.  Implementations that support
	  parsing of presentation format records SHOULD be able to
	  read and understand these TYPE representations as well.</t>
	</list>
	</t>
      </section>

      <section title="CSYNC RR Example">
	<t>The following CSYNC RR shows an example entry for
	"example.com" that indicates the NS, A and AAAA bits are set
	and should be processed by the parental agent for example.com.
	The parental agent should pull data only from a zone using a
	minimum SOA serial number of 66 (0x42 in hexadecimal).

<figure>
<artwork>
example.com. 3600 IN CSYNC 66 1 A NS AAAA
</artwork>
</figure>
</t>

        <t>The RDATA component of the example CSYNC RR would be
	encoded on the wire as follows:

<figure>
<artwork>
  0x00 0x00 0x00 0x42             (SOA Serial)
  0x00 0x01                       (Flags [the immediate bit is set])
  0x00 0x04 0x60 0x00 0x00 0x08   (Type Bit Map)
</artwork>
</figure>
</t>

      </section>
    </section>
</section>
    <section title="CSYNC Data Processing" anchor="data_processing">
      <t>The CSYNC record and associated data must be processed as an
      "all or nothing" operation set.  If a parental agent fails to
      successfully query for any of the required records, the whole
      operation MUST be aborted.  (Note that a query resulting in "no
      records exist" as proven by NSEC or NSEC3 is to be considered
      successful).
      </t>

      <t>Parental agents MAY:
      <list>
	<t>Process the CSYNC record immediately after noticing it if
	the "immediate" flag is set.  If the "immediate" flag is not
	set, the parental agent MUST not act until the zone
	administrator approves the operation through an out-of-band
	mechanism (such as through pushing a button via a web interface).</t>

	<t>Require that the child zone administrator approve the
	operation through an out-of-band mechanism (such as through
	pushing a button via a web interface).  I.e., a parental agent
	MAY choose not to support the "immediate" flag.</t>
      </list>
      </t>
      <t>Note: how the approval is done out-of-band is outside the
      scope of this document and is implementation-specific to
      parental agents.</t>

      <section title="Processing Procedure">
	<t>The following shows a sequence of steps that SHOULD be used
	when collecting and processing CSYNC records from a child
	zone.  Because DNS queries are not allowed to contain more
	than one "question" at a time, a sequence of requests is
	needed.  When processing a CSYNC transaction request, all DNS
	queries should be sent to a single authoritative name server
	for the child zone.  To ensure a single host is being
	addressed, DNS over TCP SHOULD be used to avoid conversing
	with multiple nodes at an anycast address.
	<list style="numbers">
	  <t>Query for the child zone's SOA record</t>
	  <t>Query for the child zone's CSYNC record</t>
	  <t>Query for the child zone's data records, as required by
	  the CSYNC record's Type Bit Map field</t>
	  <t>Query for the child zone's SOA record again</t>
	</list>
	</t>
	<t>If the SOA records from the first and last steps have
	different serial numbers, then the CSYNC record obtained in
	the second set MUST NOT be processed.</t>

	<t>If the SOA serial numbers are equal but less than the CSYNC
	record's SOA Serial Field <xref target="RFC1982" />,
	the record MUST NOT be processed.
	If state is being kept by the parental agent and the SOA
	serial number is less than the last time a CSYNC record was
	processed, this CSYNC record SHOULD NOT be processed.
	Similarly, if state is being kept by the parental agent and
	the SOA Serial Field of the CSYNC record is less than the SOA
	Serial Field of the CSYNC record from last time, then this
	CSYNC record SHOULD NOT be processed.</t>

	<t>If DNSSEC fails to validate all of the data returned for
	these queries as "secure", then this CSYNC record MUST NOT be
	processed.</t>

	<t>See the "Operational Consideration" section (Section <xref
	target="operational" />) for additional guidance about
	processing.</t>
      </section>

      <section title="CSYNC Record Types">

      <t>This document defines how the following record types may be
      processed if the CSYNC Type Bit Map field indicates they are to
      be processed.</t>

      <section title="The NS type" anchor="ns">
	<t>The NS type flag indicates that the NS records from the
	child zone should be copied into the parent's delegation
	information records for the child.</t>

	<t>NS records found within the child's zone should be copied
	verbatim and the result published within the parent zone
	should be an exact matching set of NS records. If the child
	has published a new NS record within their set, this record
	should be added to the parent zone.  Similarly, if NS records
	in the parent's delegation records for the child contain
	records that have been removed in the child's NS set, then
	they should be removed in the parent's set as well.</t>

	<t>Parental agents MAY refuse to perform NS updates if the
	replacement records fail to meet NS record policies required
	by the parent zone (e.g. "every child zone must have at least
	2 NS records").</t>
      </section>
      <section title="The A and AAAA types">
	<t>The A and AAAA type flags indicates that the A and AAAA,
	respectively, address glue records for in-bailiwick NS records
	within the child zone should be copied into the parent's
	delegation information.</t>

	<t>Queries should be sent by the parental agent to determine
	the A and AAAA record addresses for each NS record within a NS
	set for the child that are in-bailiwick.</t>

	<t>Note: only the matching types should be
	queried.  E.g., if the AAAA bit has not been set, then the
	AAAA records (if any) in the parent's delegation should remain
	as is.  If a given address type is set and the child's zone
	contains no data for that type (as proven by appropriate NSEC
	or NSEC3 records), then the result in the parent's delegation
	records for the child should be an empty set.
	</t>

	<t>The procedure for querying for A and AAAA records MUST
	occur after the procedure, if required, for querying for NS
	records as defined in Section <xref target="ns" />.  This
	ensures that the right set NS records is used as provided by
	the current NS set of the child.  I.e., for CSYNC records that
	have the NS bit set, the NS set used should be the ones pulled
	from the child while processing the CSYNC record.  For CSYNC
	records without the NS bit set, the existing NS records within
	the parent should be used to determine which A and/or AAAA
	records to update.</t>
      </section>
    </section>
    </section>
    <section title="Operational Considerations" anchor="operational">
      <t>There are a number of important things to consider when
      deploying a CSYNC RRType.</t>
      <section title="Error Reporting">
	<t>There is no inline mechanism for a parental agent to report
	errors to operators of child zones.  Thus, the only error
	reporting mechanisms must be out of band, such as through a
	web console or over email.  Child operators utilizing the
	"immediate" flag that fail to see an update within the
	parental agent's specified operational window should access
	the parental agent's error logging interface to determine why
	an update failed to be processed.</t>
      </section>
      <section title="Child Nameserver Selection">
      <t>Parental agents will need to poll child nameservers in search
      of CSYNC records and related data records.</t>
      <t>Parental agents MAY perform best-possible verification by
      querying all NS records for available data to determine which
      has the most recent SOA and CSYNC version (in an ideal world,
      they would all be equal but this is not possible in practice due
      to synchronization delays and transfer failures).</t>

      <t>Parental agents MAY offer a configuration interface to allow
      child operators to specify which nameserver should be considered
      the master to send data queries too.  This master may not be one
      of the publically listed nameservers in the NS set (i.e., it may
      be a "hidden master").</t>

      <t>Parental agents MAY offer a programmatic interface to let children
      indicate that new CSYNC records and data are available for polling.</t>
      </section>
      <section title="Documented Parental Agent Type Support">
	<t>Parental agents that support processing CSYNC records
	SHOULD publicly document the following minimum processing
	characteristics:
	<list>
	  <t>The fact that they support CSYNC processing</t>
	  <t>The Type Bit Map bits they support</t>
	  <t>The frequency with which they poll clients (which MAY
	  also be configurable by the client)</t>
	  <t>If they support the "immediate" flag</t>
	  <t>If they poll a child's
	  single nameserver, a configured list of
	  nameservers, or all of the advertised nameservers when
	  querying records</t>
	  <t>If they support SOA serial number caching to avoid issues
	  with regression and/or replay</t>
	  <t>Where errors for CSYNC processing are published</t>
	  <t>If they support sending queries to a "hidden master".</t>
	</list>
      </t>

      </section>
      <section title="Other Considerations">
	<t>XXX: Discuss complete replacement scenarios and if allowed.</t>
      </section>
    </section>
    <section title="Security Considerations">
      <t>This specification requires the use of DNSSEC in order to
      determine that the data being updated was unmodified by
      third-parties.  Parental agents implementing CSYNC processing
      MUST ensure all DNS transactions are validated by DNSSEC as
      "secure".  Clients deploying CSYNC MUST ensure their zones are
      signed, current and properly linked to the parent zone with a DS
      record that points to an appropriate DNSKEY of the child's
      zone.</t>
      <t>This specification does not address how to perform
      bootstrapping operations to get the required initial
      DNSSEC-secured operating environment in place.  Additionally,
      this specification was not designed to synchronize DNSSEC
      security records, such as DS pointers.  For such a
      solution, please see the complimentary solution <xref
      target="I-D.kumari-ogud-dnsop-cds" /> for
      maintaining security delegation information.</t>
    </section>
    <section title="IANA Considerations">
      <t>TBD</t>
    </section>
    <section title="Acknowledgments">
      <t>A thank you goes out to Warren Kumari and Ólafur Guðmundsson,
      who's work on the CDS record type helped inspire the work in
      this document, as well as the definition for the "parental agent"
      definition.  A thank you also goes out to
      Ed Lewis, who the author held many conversations with about the
      issues surrounding parent/child relationships and
      synchronization.  Much of the work in this document is derived
      from the careful existing analysis of these three esteemed
      colleagues.  Thank you to the following people who have
      contributed text to the document: Matthijs Mekking and Petr Spacek.</t>

      <t>A special thanks goes to Roy Arends, for taking the "bite out
      of that hamburger" challenge while discussing this document.</t>
    </section>
    </middle>
  <back>
    <references title="Normative References">
      &rfc1982;
      &rfc2119;
      &rfc3597;
      &rfc4034;
    </references>
    <references title="Informative References">
      &rfc1034;
      &rfc1035;
      &rfc4033;
      &rfc4035;
      &I-D.kumari-ogud-dnsop-cds;
    </references>
  </back>
</rfc>
