* Notes from last call (-02)
  :LOGBOOK:
  - State "DONE"       from ""           [2014-09-02 Tue 16:52]
  :END:

*** Adrian Farrel
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2014-09-02 Tue 13:31]
    :END:
    Adrian Farrel has entered the following ballot position for
    draft-ietf-dnsop-child-syncronization-02: No Objection

    When responding, please keep the subject line intact and reply to all
    email addresses included in the To and CC lines. (Feel free to cut this
    introductory paragraph, however.)


    Please refer to http://www.ietf.org/iesg/statement/discuss-criteria.html
    for more information about IESG DISCUSS and COMMENT positions.


    The document, along with other ballot positions, can be found here:
    http://datatracker.ietf.org/doc/draft-ietf-dnsop-child-syncronization/



    ----------------------------------------------------------------------
    COMMENT:
    ----------------------------------------------------------------------

    I have no objection to the publication of this document, but note a
    couple of nits.

    ---

**** DONE I'm a pedant, I know, but...
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:23]
     :END:
    Abstract
    OLD
       This document specifies how a child zone in the DNS can publish a
       record to indicate to a parental agent that it may copy and process
       certain records from the child zone.  The existence of and value
       change of the record may be monitored by a parental agent and acted
       on as appropriate.
    NEW
       This document specifies how a child zone in the DNS can publish a
       record to indicate to a parental agent that the parental agent may
       copy and process certain records from the child zone.  The existence
       of the record and any change in its value may be monitored by a
       parental agent and acted on depending on local policy.
    END

**** DONE - "...it may..." is marginally ambiguous
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:24]
     :END:
     + WJH: changed to "can"
**** DONE - "...existence of and value of..." was sufficiently clumsy to cause
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:26]
     :END:
      re-reading
      + WJH: changed to "The existence of a CSYNC record and its value can
        be monitored by a parental agent and acted on as appropriate"
**** DONE - "as appropriate" always rings an alarm bell with me because it
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:27]
     :END:
      actually says nothing :-)  (I may be wrong about "...depending on
      local policy" which would:
      - prove my point
      - allow you to substitute your own text.

	+ WJH: changed to the same text in both places

**** DONE The same paragraph appears in the Introduction.
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:28]
     :END:

    ---

    Continuing the pedantic theme (don't I have anything better to do with
    my time?)...

**** DONE Section 1
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:29]
     :END:

       It has been traditionally challenging for child DNS operators to
       update their delegation records within the parent's set in a timely
       fashion.

    "Tradition"?
    Image of my grandfather on the roof of his house with violin and DNS
    server.
    Maybe just strike the word.

    + WJH: It has been struck

**** DONE Also "child DNS operators" made me giggle unmercifully.
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:30]
     :END:
    Maybe "operators of child DNS zones"?
    
    + WJH: good point.  And I'm happy you enjoyed any humor you got out of
      it :-)

**** WONTDO In general, the inclusion of "zone" after "DNS" will help clarify.

     + WJH: I'm not sure that's actually wise in most other places.  Is
       there a few places you were thinking of?

**** DONE 2.1.1.2 and 2.1.1.2.1.
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-09-02 Tue 13:31]
     :END:

    c/Section Section/Section/


*** DONE Brian Haberman
    :LOGBOOK:
    - State "DONE"       from ""           [2014-09-02 Tue 13:36]
    :END:

***** DONE DISCUSS:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-02 Tue 13:36]
      :END:
      ----------------------------------------------------------------------

      I support the publication of this document, but I have one point that I
      would like to discuss.  I *think* this should be easy...

      Section 2.1.1.2.1 ends with this text:

         Specifically: a parental agent must not copy data blindly; An IETF
         proposed (or higher) standard specification must exist that defines
         how the data should be processed for a given bit.

      I am not sure how this gets enforced given its locality within the
      document.  I think it is easier to enforce by taking the text out of
      2.1.1.2.1 and adding text to the IANA Considerations section stating that
      in order to allocate a bit out of the Child Synchronization (CSYNC) Flags
      registry, the RFC needs to be published via Standards Action (per RFC
      5226). That would clearly control what type of document can get a bit
      allocated out of that registry.


      + WJH: Good point; changed to "Specifically: a parental agent must not copy data blindly
	and must understand the semantics associated with an bit in
	the Type Bit Map field that has been set to 1."


      + WJH: New IANA text: For new assignments to be made to this
        registry, a new RFC must be published via a Standards Action.

*** DONE Joel Jaeggli
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2014-09-02 Tue 13:36]
    :END:

      ----------------------------------------------------------------------
      DISCUSS:
      ----------------------------------------------------------------------

      it appears that this went to to short a last call for it's intended
      status (standards track)

      + WJH: this was reissued already right?  (yep: aug 08)

*** DONE Pete Resnick
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2014-09-02 Tue 16:52]
    :END:

***** DONE DISCUSS:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-02 Tue 16:52]
      :END:
    The writeup and the document itself say that this is going to be
    Standards Track, which seems appropriate. But the datatracker says that
    it is going for Informational, the Last Call went out as Informational,
    and it is being balloted as Informational. If the intention is that this
    is Standards Track, this needs a new Last Call and needs to be on a new
    telechat. (For those that might be thinking that this is meaningless
    process-wonkery, please note that getting the status wrong has
    consequences: Barry and I split up Informational documents so only one of
    us reviews each. Therefore, Barry did not review this document at all. I
    am quite sure if this is to be Standards Track, he would want to review
    it.)

    + think this is done right?  (yep: aug 08)


***** DONE COMMENT:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-02 Tue 16:52]
      :END:
    ----------------------------------------------------------------------

******* DONE Good document. A few simple comments:
	:LOGBOOK:
	- State "DONE"       from "DONE"       [2014-09-02 Tue 16:52]
	- State "DONE"       from "TODO"       [2014-09-02 Tue 13:43]
	:END:

        Section 3:

          Require that the child zone administrator approve the operation
          through an out-of-band mechanism (such as through pushing a button
          via a web interface).  I.e., a parental agent MAY choose not to
          support the "immediate" flag.

        I think you reversed this sentence. Better would be:

          Choose not to process the CSYNC record immediately, even if the
          "immediate" flag is set. That is, a parental agent might require
          the child zone administrator approve the operation through an
          out-of-band mechanism (such as through pushing a button via a web
          interface).

        + WJH: suggested text added

******* DONE Sections 4.2, 4.3, and 4.4: The MAYs in there MAY be inappropriate. The
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2014-09-02 Tue 16:52]
	:END:
    	ones about providing interfaces sure don't seem like protocol options. On
    	the others it's hard to tell. Please review. The SHOULD in 4.4 seems also
    	suspiciously wrong.

	+ WJH: I changed a few of the MAYs, but most seemed appropriate.
          The SHOULD on the documentation is somewhat important, as
          without documentation from the parental agent stating they
          support the CSYNC type, and how they're making use of it,
          clients have no way to know whether the protocol can be
          used.  There is no discovery that you get something good
          from your parent if you publish a CSYNC record.  The parent
          must document they're support for children to know they can
          make use of it.
*** DONE Warren Kumari
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2014-09-03 Wed 15:06]
    :END:

      Revision reviewed: draft-ietf-dnsop-child-syncronization-01
      Summary: Ready with nits.
      ID Nits: Clean, other than a ref to a newer version of a draft (RFC Ed
      can deal with this).

      Checklist stuff:
      A.1.  Operational Considerations
      This document does describe how deployment will occur (it's basically
      built in to the document) and the solution is deployable.
      It appears to scale well from an operational / management perspective.

      A.1.5.1 - Will the new protocol significantly increase traffic load on
      existing networks?
      In a pathological network it could be noticeable - if you had a
      nameserver with a *very* large number of *very* unpopular names the
      CSYNC "polls" could be a significant fraction of traffic. This is very
      very unlikely to occur in the real world - nameservers like this (if
      they exist) are probably run by registrars ("Get free DNS when you buy
      a domain!") who would not need this functionality (they manage things
      in a different manner). They would also have other domains that get
      significant traffic, so the CSYNC would get lost in the noise
      anyway...

***** DONE A.1.8 - Are there fault or threshold conditions that should be reported?
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:06]
      :END:
      Yes, kinda. Inability to process a CSYNC record (for any reason)
      should be reported. It would be nice to be able to signal that to the
      child, but there is no realistic way to accomplish this (which the
      document covers). I think that it would be useful for the document to
      suggest that failures SHOULD be logged (so that the parent can
      troubleshoot if they want to).

      + WH: added "Parental agents SHOULD, at a
	minimum, at least log errors encountered when processing CSYNC
	records.  "

      A.3:
      This document includes an Operation Considerations section (Section
      4). It is well written and understandable.
      Q: Does the proposed protocol have a significant operational impact on
      the Internet?
      A: Yup, it sure does -- deployment of this solution will significantly
      lessen delegation mismatches between parent and child. This will
      improve the stability / correctness of the DNS, and so the Internet at
      large.


      Nits:

      Section 1 - Introduction:
***** DONE Some resource records (RRs) in a parent zone are typically expected
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:04]
      :END:
        to be in-sync [O: in-sync P: in sync] with the source data in the
      child's zone.

***** DONE This difficulty is frequently from simple operator laziness [O: This
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:04]
      :END:
      difficulty is frequently from simple operator laziness
        or because of the complexities of... P: These difficulties may stem
      from operator laziness, as well as from the complexities of...]

***** DONE This specification was not designed to synchronize DNSSEC security
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:03]
      :END:
        records, such as DS RRsets.  For a solution to this problem, see the
        complimentary [O: complimentary P: complementary] solution
        [I-D.ietf-dnsop-delegation-trust-maintainance],

      (I do like the fact that the document is complimentary about
      I-D.ietf-dnsop-delegation-trust-maintainance :-)


***** DONE Section 4:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:02]
      :END:
       Where [O: where P: Where] errors for CSYNC processing are published

       + WH: already done

***** WONTDO Section 2.1.1.2.1:
      "Specifically: a parental agent must not copy data blindly; An IETF
       proposed (or higher) standard specification"
      I think the 'A' in 'An' does not need to be capitalized.

      + WH: text was revised since then and this no longer applies

***** DONE Section 3.2.2:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:01]
      :END:
      "The A and AAAA type flags indicates that the A and AAAA,
       respectively, address glue records for in-bailiwick NS records within
       the child zone should be copied into the parent’s delegation
       information."

      I found this sentence difficult to parse (even though I know what it
      was trying to say). I think that just dropping the "respectively"
      would make it much clearer (and folk won't get confused).

      + WH: so dropped


***** DONE Acknowlegement:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:00]
      :END:
      Olafur is listed as "Olafur Gu[eth]mundsson" - I believe that he'd
      prefer: Ólafur Guðmundsson if possible else Olafur Gudmundsson.

      + WH: was already done

***** DONE A thank you also goes out to Ed Lewis, who the author
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 15:00]
      :END:
        held many conversations with  [O: who...with P: with whom ...] about
      the issues surrounding parent/
        child relationships and synchronization.


      More than Nits:
***** DONE Section 3.1:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 14:59]
      :END:
      "If the SOA records from the first and last steps have different
       serial numbers, then the CSYNC record obtained in the second set MUST
       NOT be processed. The operation MAY be restarted or retried in the
       future."
      I think it might be helpful to explain *why* the SOA might change
      (otherwise it kinda sounds like the processing of the CSYNC record
      caused the change). Something like: If the SOA records from the first
      and last steps have different
       serial numbers (for example, because the zone was edited during the
      interval between steps 1 and 4), then ..."

      + WH: added a variation: "(for example, because the zone was
	edited and republished during the interval between steps 1 and
	4)"

***** DONE 6: IANA Considerations:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-09-03 Wed 14:58]
      :END:
      I think that this document is creating an IANA registry, and will
      probably need a longer bit of text (basically requesting that the IANA
      creates the registry). Not sure though.
      
      + WH: done previously based on text, I think, from Warren if I recall.

*** TODO 神明達哉
***** DONE Section 1 (introduction), the first paragraph:

        This document specifies how a child zone in the DNS ([RFC1034],
        [RFC1035]) can publish a record to indicate to a parental agent that
        it may copy and process certain records from the child zone.  The
        existence of and value change of the record may be monitored by a
        parental agent and acted on as appropriate.

      I vaguely remember someone already pointed this out, but anyway: I'm
      afraid the term "parental agent" is not so widely shared that we can
      safely use it without first giving the definition.  One easy way to
      address this would be to add a forward reference to Section 1.1 at
      the first occurrence of the term.  If possible, it would be even
      nicer if we can avoid using this term until the definition is given
      in Section 1.1.  For the same reason, it would be safer to avoid
      using it in the abstract.

      WJH: I've put in a forward reference in the introduction.  I'm
      not worried about the abstract as much, as any serious reader
      will likely read on anyway.  And the point of the term was to
      make sure we don't say something confusing like "parent" when
      there is more than one.  There is no standard term, and the best
      that the WG came up with (thanks to Olafur) is the new term.
      But a forward reference in the introduction definitely makes
      sense.

          This document specifies how a child zone in the DNS ([RFC1034],
      -   [RFC1035]) can publish a record to indicate to a parental agent that
      -   it can copy and process certain records from the child zone.  The
      -   existence of the record and any change in its value can be monitored
      -   by a parental agent and acted on depending on local policy.
      +   [RFC1035]) can publish a record to indicate to a parental agent (see
      +   section Section 2 for a definition of "parental agent") that it can
      +   copy and process certain records from the child zone.  The existence
      +   of the record and any change in its value can be monitored by a
      +   parental agent and acted on depending on local policy.


***** DONE Section 3 (in general)
       Do we need some way to avoid making the parental agent keep fetching
       RRsets specified in CSYNC only to confirm they are still the latest?
       draft-ietf-dnsop-delegation-trust-maintainance has a way to avoid
       that by removing CDS/CDNSKEY once all parent name servers are
       updated.

       WJH: good point; I've added this to the operational
       considerations section:

       4.5.  Removal of the CSYNC records

          Children MAY remove the CSYNC record upon noticing that the parent
          zone has published the required records, thus eliminating the need
          for the parent to continually query for the CSYNC record and all
          corresponding records.  By removing the CSYNC record from the child
          zone, the parental agent will only need to perform the query for the
          CSYNC record and can stop processing when it finds it missing.  This
          will reduce resource usage by both the child and the parental agent.

***** DONE In Section 3.1, it suggests a sequence of CSYNC and other followup
       queries enclosed by SOA queries, and requires serials of the SOAs be
       identical (with a MUST).  I wonder if this is reliable enough for a
       rapidly changing zone, such as those accepting dynamic updates at a
       very high rate.  We might say such cases are out of scope of this
       mechanism, but I personally think such an environment is not so
       deviant that a standard-track protocol can casually ignore.  At the
       very least I would like to see some explicit consideration text on
       the expected limitation (if any) regarding this point

       WJH: That's a valid concern.  I don't think we need to address
       the exact way this should be handled, as that can be
       implementation dependent.  So I've changed it to a SHOULD and
       added the following bit of text as well:

           If the SOA records from the first and last steps have different
           serial numbers (for example, because the zone was edited and
           republished during the interval between steps 1 and 4), then the
       -   CSYNC record obtained in the second set MUST NOT be processed.  The
       -   operation MAY be restarted or retried in the future.
       +   CSYNC record obtained in the second set SHOULD NOT be processed
       +   (rapidly changing child zones may need special consideration or
       +   processing).  The operation MAY be restarted or retried in the
       +   future.

***** TODO Section 3.1

        [...]  If
        state is being kept by the parental agent and the SOA serial number
        is less than the last time a CSYNC record was processed, this CSYNC
        record SHOULD NOT be processed.  Similarly, if state is being kept by
        the parental agent and the SOA Serial Field of the CSYNC record is
        less than the SOA Serial Field of the CSYNC record from last time,
        then this CSYNC record SHOULD NOT be processed.

       I'm not sure about the point of these "SHOULD NOT"s.  If it's okay
       with ignoring mismatches with stored state, why would the parental
       agent bother to keep the state in the first place?  Since keeping
       the state itself is optional, it seems to make more sense to use
       "MUST NOT" here.

***** TODO Section 3.2

        NS records found within the child's zone should be copied verbatim
        and the result published within the parent zone should be an exact
        matching set of NS records.

       Does "verbatim" indicate that the TTL should also be copied?  The
       same question applies to Section 3.2.2, although "verbatim" isn't
       used in that section.

***** TODO Section 3.2: what if the followup NS query results in 'no data'?  Of
       course, this means the child zone is broken, but if the parent also
       removes the NS RRsets, subsequent resolution for the zone will
       immediately fail at the parent zone; on the other hand, if the
       parent just ignores such result and keeps the NS RRset (and if it's
       actually still usable), subsequent resolution will still somehow
       work in many cases in practice.  I don't know if that's the desired
       scenario, and we might rather make it fail sooner rather than
       leaving the half-broken state longer.  In any case, I think it would
       be nicer to mention this case (and what the parent should do) in
       this document.

***** TODO Section 4.2
       We may want to be clearer about how the child name servers and their
       addresses are determined to send CSYNC queries if they are not
       manually configured.  That is, this should essentially come from
       the NS and AAAA/A records at the parent zone, and some of these may
       be obsolete or even unusable at the time of query (in fact,
       reflecting such changes is exactly the purpose of these queries).
       This also means the child cannot simply update all NS (or AAAA or A)
       records at once, making the old ones unworkable, and expect the
       parent will catch up with it.  This may be obvious in some sense,
       but may still be worth noting.

***** TODO Section 4.3

        Children deploying NS records pointing to domain-names within their
        own children (the "grandchildren") SHOULD ensure the grandchildren's
        associated glue records are properly set before publishing the CSYNC
        record.  I.e., it is imperative that proper communication and
        synchronization exist between the child and the grandchild.

       I'm afraid this setup requires more discussion.  In the following
       configuration:
       parent: example.com.
       child: child.example.com.
         child.example.com. NS ns.grand.child.example.com.
         grand.child.example.com. NS ns.grand.child.example.com.
         ns.grand.child.example.com. AAAA 2001:db8::1
       grand child: grand.child.example.com.
         ns.grand.child.example.com. AAAA 2001:db8::1
       If the AAAA record is changed, the child will update its CSYNC record
       with setting the bit for AAAA.  According to Section 3.1, the parental
       agent will send a query for the AAAA record to the child's name
       server, but it will return a delegation to the grandchild, not the
       requested AAAA itself, let alone its RRSIG.  The parental agent
       could then resolve and verify the AAAA separately, but it breaks the
       "atomicity" of the operation that this section seems to seek by
       enclosing the whole set of queries with two SOA queries.

     - Section 6: unfortunately code 61 was already registered for OPENPGPKEY.
        [ To be removed prior to publication: The CDS (59), CDNSKEY (60) and
        the CSYNC records are all conceptually similar - if the code-point 61
        happens to still be Unassigned when the IANA processes this, it would
        be nice if that could be used for this.]

     - Editorial nits
       - Section 2: s/these/three/
        The CSYNC RRType contains, in its RDATA component, these parts: an
       - Section 2: s/Section Section/Section/ (there are several instances
         of this error)
        data is processed is described in Section Section 3.
       - Section 2: s/any anything/anything/ (?)
        if any of the validation results indicate any anything other than

* Notes from IESG review (-03)

*** DONE Alia Atlas

***** DONE First sentence in Sec 1 is missing an it:
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-11-25 Tue 16:05]
      :END:
      "This document specifies how a child zone in the DNS ([RFC1034],
         [RFC1035]) can publish a record to indicate to a parental agent that
         can copy and process certain records from the child zone."

      WJH: Added

***** DUP In Sec 2: What does unpunishable data mean in
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2014-11-25 Tue 16:06]
      :END:
      "Errors due to unsupported Type Bit Map bits, or otherwise
      nonpunishable data, SHALL result in no change to the parent zone's
      delegation information for the Child."

      WJH: It was a typo and already changed to "publishable"

***** DONE In Sec 3.1:

      It says " If the SOA serial numbers are equal but less than the
      CSYNC record's SOA Serial Field [RFC1982], the record MUST NOT be
      processed."  which seems to contradict what is stated in Sec
      2.1.1.1 "If the soaminimum flag is not set, parental agents MUST
      ignore the value in the SOA Serial Field.  Clients can set the
      field to any value if the soaminimum flag is unset, such as the
      number zero."

      Perhaps I'm missing a relevant DNS clue?

      WJH: good catch!  Changed to "If the soaminimum flag is set and the
      SOA serial numbers are equal but less than the CSYNC record's SOA
      Serial Field..."

*** DONE Barry Leiba

***** DONE In the definition of the CSYNC Flags registry in the IANA
      Considerations, you have two conflicting statements:

      ONE:
         Assignment of new flag values are subject to
         "RFC Required" specifications [RFC5226].

      TWO:
         For new assignments to be made to this registry, a new RFC must be
         published via a Standards Action.

      Which is it: RFC Required, or Standards Action?  They are
      different (the former allows for Experimental or Informational
      RFCs, and RFCs in the Independent or IRTF streams; the latter
      requires a Standards Track RFC in the IETF stream).  There's
      also "IETF Review", which requires an IETF stream RFC, but
      allows Informational or Experimental).

      WJH: Changed to be standards-track

*** DONE Pete Resnick

***** DONE Sections 4.2, 4.3, and 4.4:

      The MAYs in there MAY be inappropriate. The ones about providing
      interfaces sure don't seem like protocol options. On the others
      it's hard to tell. Please review. The SHOULDs in 4.1 and 4.4 seems
      also suspiciously wrong.


      Pete: last time I responded with the following comment.  Maybe it
      wasn't read, as the same comment is being repeated without a
      response to the following comment: 

  	+ WJH: I changed a few of the MAYs, but most seemed appropriate.
            The SHOULD on the documentation is somewhat important, as
            without documentation from the parental agent stating they
            support the CSYNC type, and how they're making use of it,
            clients have no way to know whether the protocol can be
            used.  There is no discovery that you get something good
            from your parent if you publish a CSYNC record.  The parent
            must document they're support for children to know they can
            make use of it.

     Since you added additional text addressing the API related concern,
     I changed one MAY to a "may" in the following sentence:

          -   <t>Parental agents MAY offer a configuration interface to allow
          +   <t>Parental agents may offer a configuration interface to allow
              child operators to specify which nameserver should be considered
              the master to send data queries too.

     The 4.3 section didn't have similar MAYs, so I didn't do
     anything about them.

     In 4.4, I made the following change:

          -  <t>The frequency with which they poll clients (which MAY
          +  <t>The frequency with which they poll clients (which may
             also be configurable by the client)</t>


     For the SHOULD in 4.1, I downcased it as well:

          - Parental agents SHOULD, at a
          + Parental agents should, at a
            minimum, at least log errors encountered when processing CSYNC
            records.

     For the SHOULD in 4.4, I didn't change it.  Because, as mentioned
     previously, publicly documenting the parameters is fairly
     important.

     Maybe these address your concerns?  Your previous comment was
     rather vague in exactly what your issues were, so I'm guessing at
     what you wanted done.

*** DONE Richard Barnes

***** DONE Adding on to Ted's DISCUSS:

      The Security Considerations need to make clear that this
      mechanism MUST NOT be used to synchronize DS records between
      child and parent (whether this is allowed through the base
      protocol or some extension).  This is because the DS records are
      the only thing the parent has that allows it to validate all the
      DNSSEC signatures that it is required to verify -- if an
      attacker can change the DS record, then it can change any other
      record it wants to.

      WJH: Ok, I added the following two middle sentences, marked with
      [new].  Do they seem sufficient?

      ... DNSSEC-secured operating environment in place.
      Additionally, this specification was not designed to synchronize
      DNSSEC security records, such as DS pointers.  [new] Thus,
      implementations of this protocol MUST NOT use it to synchronize
      DS records or DNSKEY materials. [new] Similarly, future
      documents extending this protocol MUST NOT offer the ability to
      syncronize DS or DNSKEY materials. For such a solution, please
      see the ...

      [the document makes it pretty clear in a number of places this
      must not be done, including the fact you aren't supposed to even
      use bits that aren't documented and the DS bit wasn't defined,
      but that being said: it's a good point that it should be well
      stated in the security considerations; thanks]

*** DONE Stephen Farrell

***** DONE 
      - general: Couldn't a child ask for its CSYNC record to be
      published in the parent? (and so on up...) I think you should
      say a parent MUST NOT take a child's CSYNC in the same way
      that you say to not use CSYNC for DS RRs.

      WJH: added a note mentioning that CSYNC, CDS, CDNSKEY records
      MUST NOT be synchronized.

      [note, however, that a parent publishing a CSYNC record at the
      parent *for the child* would certainly be interesting and really
      only affect broken resolvers that were willing to accept
      non-authoratative answers; none the less, I don't mind
      mentioning it]

***** DONE 
      - 2.1.1.2.1: Is the meaning of "blindly" sufficiently clear
      that all implementers and deployers will get this right?
      I'm willing to believe you if you say it is.

      WJH: made the following change, which seems sufficient?:

	-  Specifically: a parental agent must not copy data blindly
	+  Specifically: a parental agent must not just copy the data


*** DONE Ted Lemon

***** DONE Point 1--

      2.1.1.1 doesn't talk about SOA serial number overflow.  It's not clear to me
      that the security goal intended by this section is correctly addressed if the
      implementation assumes that the comparison operators defined in section 3.2 of
      RFC 1982 are used, rather than doing a simple unsigned compare.

      I don't think there's a clearly correct answer here, but the issue should be
      documented and, ideally, a choice should be made.   To clear this DISCUSS, the
      document needs to say which of the two sets of comparison operators apply, and
      needs to explain how serial number wrap events are accounted for (or that they
      are not accounted for, and this is an open issue with security implications).

      The easiest way to fix this would be to require a comparison for equality, but
      I realize that this would place an additional burden on implementations which
      may be impractical.

      WJH: Of all the comments received this one confuses me the most.
      Mostly because I think 1982 is quite clear about how to do the
      comparison operator and there is only one, the "less than"
      operation and it is discussed in 3.2 of 1982.  So, I'm not
      entirely clear what you're looking for.  I can add some text to
      explicitly mention wrapping, but that is exactly what 1982 is
      about: how to do comparisons with wrapping.  So, trying to add
      something that at least more explicitly mentions what I think
      you're looking for, I added this to the bottom 2.1.1.1:

	  <t>Although Section 3.2 of <xref target="RFC1982" />
	  describes how to properly implement a less-than comparison
	  operation with SOA serial numbers that may wrap beyond the
	  32-bit value in both the SOA record and the CSYNC record, it
	  is important than a child using the soaminimum flag must not
	  increment it's SOA serial number value more than 2^16
	  (including any 32-bit wrapping) within the period of time
	  that a parent might wait between polling the child for the
	  CSYNC record.</t>

      It's actually not a security feature so much as a operational
      feature to prevent a parent from toggling back and forth between
      two values if one nameserver does not have the most recent data
      set.  But, the DNSSEC signature lifetimes could be long enough
      to allow for replays if the serial numbers increased by more
      than 2^16 within it.  So...  I added this:

          <t>To ensure that an older CSYNC record making use of the
          soaminimum flag can not be replayed to revert values, the SOA
          serial number MUST NOT be incremented by more than 2^16
          during the lifetime of the signature window of the associated
          RRSIGs signing the SOA and CSYNC records.  Note that this is
          independent of whether or not the increment causes the 2^32 bit
          serial number field to wrap.</t>

      Is this (these) sufficient to address your concerns?

***** DONE Point 2--

      In 3.2.1, you don't say what to do if the name server returns an NS record
      listing names queries on which result in NXDOMAIN, or for which neither A nor
      AAAA records exist.

      WJH: To the last paragraph of the NS section, I added two sentences:

        - 2 NS records").</t>
        + 2 NS records").  Parental agents MUST NOT perform NS updates
        + if there are no NS records returned in a query, as verified by
        + DNSSEC denial of existence protection.  This situation should
        + never happen unless the child nameservers are misconfigured.</t>

      WJH: and to the address section, added:

        - records for the child should be an empty set.
        + records for the child should be an empty set.  However, if the
        + end result of processing would leave no glue records present
        + in the parent zone for any of the of the in-bailiwick NS
        + records, then the parent MUST NOT update the glue address
        + records.  I.E., if the result of the processing would leave no
        + in-bailiwick A or AAAA records when there are in-bailiwick NS
        + records, then processing of the address records can not happen
        + as it would leave the parent/child relationship without any
        + address linkage.

***** NOFIX Point 3--

      I don't think you've specifically excluded RRtypes not mentioned in section
      3.2.  It's seems obvious to me based on what's stated in section 2 that the
      intention of the document is to only support these two RRtypes, but I think it
      is necessary to say so explicitly, if that is in fact what is intended.   If
      something else is intended, text explaining what is intended should be added.  
      E.g., if it's okay for cooperating child name servers to set bits not listed
      here, and for cooperating parent name servers to process them, you should say
      so.

      WJH: This is stated, and I think you missed it.  Section
      2.1.1.2.1 (about the type bit map field) states (slightly
      different based on a comment from Stephen, who did see it):

	  Specifically: a parental agent must not just copy the data
	  and must understand the semantics associated with an bit in
	  the Type Bit Map field that has been set to 1.

      Let me know if you think this is insufficient.

***** DONE In 2.1.2, why SHOULD and not MUST here?

            Implementations that support parsing of presentation format
            records SHOULD be able to read and understand these TYPE
            representations as well.

      WJH: Because parsers don't necessarily need to understand the
      semantics of the record.  They just need to be able to keep
      reading and store the data.  Storing the data in ascii text is
      just fine if they're not going to process it in any other way.
      It'd be better if they understood it, but I can see cases where
      they don't full support everything (eg, new types listed even
      though they know some of them).

***** DONE In 3.2.1, what happens if the parent queries a host, and that host no longer
      appears in the updated NS record?   I think this is Mostly Harmless, but might
      be worth mentioning.   Also, in principle if the old server is left running but
      no longer authoritative, this whole scheme would fail if, for example, it had
      been the master prior to the change, were not configured to no longer serve the
      zone, and were no longer being updated.   This is probably worth mentioning as
      an operational consideration.

      WJH: Added the following text updates to address these points:

      To the bottom of section 3.2.1:
        <t>Note that it is permissible for a child's nameserver to
        return a CSYNC record that removes the queried nameserver
        itself from the future NS or address set.</t>

      To the bottom of section 4.2:

        <t>Children that wish to phase out a nameserver will need to
        publish the CSYNC record to the nameserver being removed and
        wait for the parental agent to process the published record
        before turning off the service.  This is required because the
        child can not control which nameserver in the existing NS set
        the parental agent may choose to query when performing CSYNC
        processing.</t>

#+TODO: TODO | DONE DUP NOFIX 
