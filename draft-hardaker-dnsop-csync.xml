<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1034 PUBLIC '' 'reference.RFC.1034.xml'>
  <!ENTITY rfc3597 PUBLIC '' 'reference.RFC.3597.xml'>
]>
<?rfc strict="yes" ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc symrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" ipr="trust200902" docName="draft-hardaker-dnsop-csync-FILLVERSION">
    <front>
    <title abbrev="Child To Parent Synchronization in DNS">
      Child To Parent Synchronization in DNS
    </title>
    <author initials="W.H." surname="Hardaker" fullname="Wes Hardaker">
      <organization>Parsons, Inc.</organization>
      <address>
	<postal>
	  <street>P.O. Box 382</street>
	  <city>Davis</city>
	  <region>CA</region>
	  <code>95617</code>
	  <country>US</country>
	</postal>
	<phone>+1 530 792 1913</phone>
        <email>ietf@hardakers.net</email>
      </address>
    </author>
    <date month="FILLMONTH" year="FILLYEAR"/>
    <area>Operations and Management</area>
    <workgroup>DNSOP</workgroup>
    <!--
    <keyword ...>
    <keyword ...>
    -->
    <abstract>
      <t>This document specifies how a child can publish a record in
      its DNS zone that can indicate that a parental agent may copy
      certain records from the child zone.  They record may be
      monitored by a parental agent to either assist in or
      automatically transferring data between the child and
      parent.</t>

    </abstract>
    <!--
    <note ...>
    -->
  </front>

  <middle>
    <section title="Introduction">

      <t>This document specifies how a child can publish a record in
      its DNS zone that can indicate that a parental agent may copy
      certain records from the child zone.  They record may be
      monitored by a parental agent to either assist in or
      automatically transferring data between the child and
      parent.</t>

      <t>Some resource records (RRs) in a parent zone are typically
      expected to be in-sync with the data in the child's zone.  This
      is currently limited to NS and associated A and AAAA "glue"
      records.  Additionally, the children frequently have DNSKEY
      records which require corresponding DS record(s) in the parent.
      These records are referred to as "delegation records".</t>

      <t>It has been traditionally challenging for children to keep
      delegation records within a parent's delegation data current.
      This difficult usually derives from simple operator laziness or
      the complexities of maintaining a large number of DNS zones.
      Having an automated mechanism to update a parent's set of
      delegation records will greatly ease the maintenance burden of a
      child zone and improve the robustness of the DNS.</t>

      <t>This draft introduces a new RRTYPE ("CSYNC") that indicates
      which delegation records within a child should be copied into
      the parent's DNS zone data.</t>

      <section title="Requirements notation" anchor="musts">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	  "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
	  and "OPTIONAL" in this document are to be interpreted as
	  described in <xref target="RFC2119"/>.</t>


	  <t>This document is aimed at the case where there is an
	  organizational separation of the child and parent.  In this
	  case there are many different operating situations.  A
	  common case is the Registrant/ Registrar/Registry
	  relationship.  In this case the parent consists of Registrar
	  and Registry, with different rules on what each can do or
	  not do.  To remain operating model neutral we will use the
	  neutral word "Parental Agent" as the entity that uses
	  results of DNS queries to inject delegation changes into the
	  parent zone.  The entity that inserts the changes in the the
	  DNS is called "DNS Publisher".</t>

      </section>
    </section>

    <section title="Definition of the CSYNC RRType">
      <t>The CSYNC RRType contains as its RDATA two components: an
      SOA serial number and a simple bit-list indicating the DNS
      RRTypes in the child that should be copied into the parent's DNS
      delegation records for the child.  Children wishing a parental
      agent to perform a synchronization MUST publish a CSYNC record
      at the apex of the child zone.  Parent agent implementations MAY
      choose to query child zones for this record and copy the data
      indicated by the bit field in the RDATA of the CSYNC record
      according to the procedures listed later.  Parental agent's MUST
      process the entire set of child data requested (i.e., all record
      types indicated along with all of the records for that type) or
      else parent agents MUST NOT process any data records at all.
      Errors due to unsupported bits or otherwise nonpunishable data
      SHALL result in no change to the parent zone's delegation
      information for the child.  Parental agents SHOULD ignore a
      child's CSYNC RDATA set if multiple CSYNC resource records are
      found; only a single CSYNC record should be expected.</t>

      <t>The parental agent MUST perform DNSSEC validation of the
      CSYNC RRTYPE data and MUST perform DNSSEC validation of any data
      to be copied from the child to the parent.  Parents MUST not
      process any data if any of the validation results indicate
      any anything other than "Secure" <xref target="RFC4034" />.</t>

      <section title="The CSYNC Resource Record Wire Format">
	<t>The CSYNC RDATA consists of the following fields:</t>
<figure>
<artwork>
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          SOA Serial                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Flags                   |            Type Bit Map       /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                     Type Bit Map (continued)                  /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

        <section title="The SOA Serial Field">
	  <t>The SOA Serial field contains a copy of the 32-bit SOA serial
	  number from the child zone.  If the value is non-zero,
	  parental agent querying children's authoritative servers
	  MUST NOT act on data from zones advertising an SOA serial
	  number less than this value.  A special value of 0 indicates
	  that no such restriction is in place.</t>

	  <t>Note that a child zone's current SOA serial number maybe
	  greater than the number contained in the CSYNC record.  A
	  child SHOULD update the SOA Serial field in the CSYNC record
	  every time the data being referenced by the CSYNC record is
	  changed (e.g. an NS record or associated address record is
	  changed).  A child MAY choose to update the SOA Serial field
	  to always match the current SOA serial field.</t>
	  
	  <t>Parental agents MAY cache SOA serial numbers from
	  data they use and refuse to process data from zones older
	  than the last zone they pulled data from.</t>
	</section>
	<section title="The Flags Field">
	  <t>The Flags field contains 16 bits of flags defining
	  operations that affect the processing of the CSYNC record.
	  The flags defined in this document are as follows:
	  <list>
	    <t>0x01: "immediate"</t>
	  </list>
	  </t>
	  <t>The definitions for how the flags are to be used can be
	  found later in Section <xref target="data_processing" />.</t>

	  <t>The remaining flags are reserved for use by future
	  specifications.  Undefined flags MUST be set to 0 by CSYNC
	  publishers.  Parental agents MUST not process a CSYNC record
	  if it contains a 1 value for a flag that is unknown to the
	  parental agent.</t>

        <section title="The Type Bit Map Field">
	  <t>The Type Bit Map field indicates the record types to be
	  processed by the parental agent, according to the procedures
	  in Section <xref target="data_processing" format="counter"
	  />.  The field is encoded in the same way as the Type Bit
	  Maps field of the NSEC record, described in <xref
 	  target="RFC4034" />, Section 4.1.2. If a bit has been
	  set that a parental agent implementation does not
	  understand, the parental agent MUST NOT act upon the data.
	  Specifically, a parental agent must not copy data blindly
	  and a specification must exist [insert long debate here over
	  level of specification required; IMHO: proposed IETF
	  standard since a bit can only be used once] that defines how
	  the data should be processed.</t>
	</section>
      </section>

      <section title="The CSYNC Presentation Format">
	<t>The CSYNC presentation format is as follows:</t>
	<t>The SOA Serial field is represented as an integer.</t>
	<t>The Flags field is represented as an integer.</t>
	<t>The Type Bit Map field is represented as a sequence of RR
	type mnemonics.  When the mnemonic is not known, the TYPE representation
	described in <xref target="RFC3597" />, Section 5, MUST be used.</t>
      </section>

      <section title="CSYNC RR Example">
	<t>The following CSYNC RR shows an example entry for
	"example.com" that indicates the NS, A and AAAA records should
	be processed for the zone using a minimum SOA serial number of
	66.

<figure>
<artwork>
example.com. 3600 IN CSYNC 73 1 A NS AAAA
</artwork>
</figure>
</t>

        <t>The RDATA component of the example CSYNC RR would be
	encoded on the wire as follows:

<figure>
<artwork>
  0x00 0x00 0x00 0x42
  0x00 0x01
  0x00 0x04 0x60 0x00 0x00 0x08
</artwork>
</figure>
</t>

      </section>
    </section>
    <section title="CSYNC Data Processing" anchor="data_processing">
      <t>The CSYNC data must be processed as an "all or nothing" type
      operation.  If a parental agent fails to query any of the
      needed records from the child, the whole operation MUST be aborted.
      </t>

      <t>Parental agents MAY:
      <list>
	<t>Process the CSYNC record immediately after noticing it if
	the "immediate" flag is set.  If the "immediate" flag is not
	set, the parental agent MUST not act immediately until the
	zone administrator approves the operation through an
	out-of-band mechanism (such as through a web interface).</t>

	<t>Require that the child zone administrator approve the  the
	operation through an out-of-band mechanism (such as through a
	web interface).  I.e., a parental agent MAY choose not to
	support the "immediate" flag.</t>
      </list>
      </t>

      <t>This document defines how the following record types may be
      processed if the CSYNC RECORDLIST indicates they should be
      processed.</t>
      <section title="The NS type" anchor="ns">
	<t>The NS type flag indicates that the NS records from the
	child zone should be copied into the parent's delegation
	information records for the child.</t>

	<t>NS records found within the child should be copied verbatim
	and the result should be a matching set of NS records in the
	parent.  Note: if NS records in the parent's delegation
	records for the child contain records that have been removed
	in the child's NS set, then they should be removed in the
	parent's set as well.</t>
      </section>
      <section title="The A and AAAA types">
	<t>The A and AAAA type flags indicates that the A and AAAA,
	respectively, address glue records for in-bailiwick NS records
	within the child zone should be copied into the parent's
	delegation information.</t>

	<t>Queries should be sent by the parental agent to determine
	the required A and AAAA record addresses for each NS record
	within a parent's NS delegation record set for the child that
	are in-bailiwick.  The answers to these queries should be
	check for DNSSEC "Secure" status and then placed into the
	parent's delegation record set for the child to become
	appropriate "glue" records.  Note: only the matching types
	should be queried.  E.g., if the AAAA bit has not been set,
	then the AAAA records (if any) in the parent's delegation
	should remain as is.  If a given address type is set and the
	child's zone contains no data for that type (as proven by
	appropriate NSEC or NSEC3 records), then the result in the
	parent's delegation records for the child should be an empty
	set.
	</t>

	<t>The procedure for querying for A and AAAA records MUST
	occur after the procedure, if required, for querying for NS
	records as defined in Section <xref target="ns" />.  This
	ensures that the right set NS records is used as provided by
	the current NS set of the child.  Note that if the NS flag has
	not been set, then the existing NS records in the parent's
	delegation records for the child should be used as-is.</t>
      </section>
      <section title="The DNSKEY type">
	<t>[Editors note: originally I was going to present this draft
	with no support for DS records as the CDS draft existed and
	looked like a mechansim that better covered all the usage
	cases.  However, I've added this section as a discussion point
	for another mechansim.  It may not be sufficient and opinions
	are sought about whether CSYNC is a viable mechansim for DS
	replacement or not.]</t>
	<t>The DNSKEY type bit indicates that the DNSKEY records in the
	child with the SEP bit set and the REVOKE bit cleared should
	be used to create a new set of DS records for inclusion in the
	parent's delegation records for the child zone.</t>
	<t>Queries should be sent to the child zone for all the DNSKEY
	records within the zone, and DS records should be generated.</t>
	<t>The DNSKEY type bit MUST NOT be set when the owner/maintainer
	of the DNSKEY records for a zone that don't contain a set SEP
	bit is different than the owner/maintainer of the DNSKEY
	records with the SEP bit set.  Organizationally, if the
	maintainers of the DNSKEY records used to sign the entire
	contents of the zone are different than the keys intended for
	the purpose of a secure-entry-point, it is important than only
	the maintainers of the SEP bit set DNSKEYs may replace the SEP
	bit DNSKEYs.</t>
	<t>Note: this DS change mechansim does not provide the client
	with the ability to select DS algorithms used in the
	parent.  The DS type bit should be used instead if both the
	parent and child wish the child to be able to select the DS
	algorithm(s) to be used.</t>
	<t>Note: this DS change mechansim does not let children
	publish DS records that point to not-yet-published DNSKEYs.
	Children that wish to do so should use the DS type bit
	instead, if their parental agent supports it.</t>
      </section>
      <section title="The DS type">
	<t>[Editors note: originally I was going to present this draft
	with no support for DS records as the CDS draft existed and
	looked like a mechansim that better covered all the usage
	cases.  However, I've added this section as a discussion point
	for another mechansim.  It may not be sufficient and opinions
	are sought about whether CSYNC is a viable mechansim for DS
	replacement or not.]</t>
	<t>The DS type bit indicates that the child has created and
	published DS records within the child's zone (i.e., below the
	cut-point) and these records should be copied into the
	parent's delegation records for the child zone.</t>
	<t>Queries should be sent to the child zone for all the DS
	records within the zone, and DS records should found should be
	copied into the parent zone's delegation records for the child
	zone.</t>
	<t>The DS type bit MUST NOT be set when the owner/maintainer
	of the DNSKEY records for a zone that don't contain a set SEP
	bit is different than the owner/maintainer of the DNSKEY
	records with the SEP bit set.  Organizationally, if the
	maintainers of the DNSKEY records used to sign the entire
	contents of the zone are different than the keys intended for
	the purpose of a secure-entry-point, it is important than only
	the maintainers of the SEP bit set DNSKEYs may replace the SEP
	bit DNSKEYs.</t>
	<t>Parental agents MUST check that at least one DS record
	within the new set points to a "secure" DNSSEC-validated
	DNSKEY record.  IE, updating of the DS record set within the
	parent zone MUST not be done if the parental agent determines
	it will no longer be possible to validate the child zone
	data. [XXX: yes, a discussion is needed about algorithm and
	other support differences].</t>
	<t>Note: this DS change mechansim does not let the parent
	select the algorithms for the DS record to be used.  The
	parent MAY choose not to support the DS type bit if they wish
	to establish policy for DS algorithm usage within their children's
	zones.  In this case, the parental agent should support the
	DNSKEY type bit instead.</t>
	<t>Note: this DS change mechansim lets children publish DS
	records that may point to unpublished DNSKEY records.
      </section>
    </section>
    
    <section title="Operational Considerations">
      <t>There are a number of important things to consider when
      deploying the usage of the CSYNC RR type.</t>
      <section title="Error Reporting">
	<t>There is no inline mechanism for a parental agent to report
	errors to child zones.  Thus, the only error reporting
	mechanisms must be out of band, such as through a web console.
	Child operators utilizing the "immediate" flag that fail to see
	an update within the parental agent's specified operational
	window should access the parental agent's log interface to
	determine why an update failed to be processed.</t>
      </section>
      <section title="Child Nameserver Selection">
      <t>Parental agents will need to poll child nameservers in search
      of CSYNC records and any other data required for processing a
      CSYNC record.</t>
      <t>Parental agents MAY perform best-possible verification by
      querying all NS records for available data to determine which
      has the most recent SOA and CSYNC version (in an ideal world,
      they would all be equal but this is not possible in practice due
      to synchronization delays and failures).  Note that polling a
      nameserver address for an SOA record followed by polling the
      same address for CSYNC or other data may not result in a
      consistent set of data due to the use of anycast or sudden data
      synchronization changes within the server.</t>

      <t>To combat part of these issues and minimize the impact of
      data changes, the SOA record MAY be polled for first, then
      the CSYNC record followed by any required data.  Finally,
      polling for the SOA record one last time to determine whether it
      change between the first poll and the last should verify that
      the data was not changed while polling was taking place.  This
      will not, however, account for differences across anyclass
      changes.  Parental agents MAY choose to use a TCP transport to
      ensure that a single nameserver instance is being reached.</t>

      <t>Parental agents MAY offer a configuration interface to allow
      child operators to specify which name server should be consider
      the master to query for data.  Child operators should be
      encouraged to make use of this configuration interface.</t>
      </section>
      <section title="Other Considerations">
	<t>XXX: Discuss complete replacement scenarios and if allowed.</t>
	<t>XXX: Polling frequency discussion</t>
	<t>XXX: differences between DS and DNSKEY type bits</t>
      </section>
    </section>
    </section>
    <section title="Security Considerations">
      <t>TBD</t>
	<t>XXX: discussion on DNSSEC checking requirements.</t>
    </section>
    <section title="IANA Considerations">
      <t>TBD</t>
    </section>
    <section title="Acknowledgments">
      <t>A thank you goes out to Warrent Kumari and Ólafur
      Guðmundsson, who's work on the CDS record type helped inspire
      the work in this document, as well as the definition for
      "Parental Agent" and "DNS Publisher" definitions.  A thank you
      also goes out to Ed Lewis, who the author held many
      conversations with about the issues surrounding parent/child
      relationships and synchronization.</t>
    </section>
    </middle>
  <back>
    <references title="Normative References">
      &rfc2119;
      &rfc3597;
      &rfc4034;
    </references>
    <references title="Informative References">
      &rfc1034;
      &rfc1035;
      &rfc4033;
      &rfc4035;
    </references>
    <section title="Example Processing">
      <t>TBD</t>
    </section>
  </back>
</rfc>
