<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1034 PUBLIC '' 'reference.RFC.1034.xml'>
]>
<?rfc strict="yes" ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc symrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" ipr="trust200902" docName="draft-hardaker-dnsop-csync-FILLVERSION">
    <front>
    <title abbrev="Child To Parent Synchronization in DNS">
      Child To Parent Synchronization in DNS
    </title>
    <author initials="W.H." surname="Hardaker" fullname="Wes Hardaker">
      <organization>Parsons, Inc.</organization>
      <address>
	<postal>
	  <street>P.O. Box 382</street>
	  <city>Davis</city>
	  <region>CA</region>
	  <code>95617</code>
	  <country>US</country>
	</postal>
	<phone>+1 530 792 1913</phone>
        <email>ietf@hardakers.net</email>
      </address>
    </author>
    <date month="FILLMONTH" year="FILLYEAR"/>
    <area>Operations and Management</area>
    <workgroup>DNSOP</workgroup>
    <!--
    <keyword ...>
    <keyword ...>
    -->
    <abstract>
      <t>This document specifies how a child can publish a record in
      its DNS zone that can be monitored by a parent to indicate that a
      parent should copy certain records from the child zone.</t>

    </abstract>
    <!--
    <note ...>
    -->
  </front>

  <middle>
    <section title="Introduction">

      <t>This document specifies how a child can publish a record in
      its DNS zone that can be monitored by a parent to indicate that a
      parent should copy certain records from the child zone.</t>

      <t>It has been traditionally challenging for children to keep
      certain records within a parent's delegation data current.  This
      difficult either results from simple operator laziness or the
      complexities of maintaining a large number of DNS zones.  Either
      way, having an automated way to update a parent's set of
      delegation information greatly eases the maintenance burden of a
      child zone.</t>

      <t>This draft introduces a new RRTYPE ("CSYNC") that indicates
      which records within a child should be copied into the parent's
      DNS zone data.</t>

      <section title="Requirements notation" anchor="musts">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	  "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
	  and "OPTIONAL" in this document are to be interpreted as
	  described in <xref target="RFC2119"/>.</t>
      </section>
    </section>

      <section title="Name Server Types">
	<t>There are multiple ways in which name servers can be
	deployed.  Name servers can take on any of the following roles:
	  <list style="symbols">
	    <t>Master Servers</t>
	    <t>Slave Servers</t>
	    <t>Recursive Servers</t>
	  </list>
	</t>

	<t>The management solution SHOULD support all of these types
	  of name servers as they are all equally important.  Note
	  that "Recursive Servers" can be further broken down by the
	  security sub-roles they might implement, as defined in
	  section 2 of <xref target="RFC4033" />.  These sub-roles are
	  also important to support within any management
	  solution.</t>

	<t>As stated earlier, the management of stub resolvers is
	  considered out of scope for this documents.</t>
      </section>

    <section title="Definition of the CSYNC RRType">
      <t>The CSYNC RRType contains as its RRData a simple bit-list
      indicating the DNS RRTypes in the child that should be copied
      into the parent's DNS delegation records for the child.
      Children wishing a parent to perform a synchronization MUST
      publish a CSYNC record at the apex of the child zone.  Parent
      implementations MAY choose to query child zones for this record
      and copy the data indicated by the bit field in the RRDATA of
      the CSYNC record.  Parent's MUST copy and publish either the
      entire set of child data requested (i.e., all record types
      indicated along with all of the records for that type) or
      else parents MUST NOT copy and publish any data at all.  Errors
      due to unsupported bits or otherwise nonpunishable data SHALL
      result in no change to the parent zone's delegation information
      for the child.  Parents MUST ignore a request if multiple CSYNC
      resource records are found.</t>

      <t>The parent MUST perform DNSSEC validation of the CSYNC RRTYPE
      data and MUST perform DNSSEC validation of any data to be copied
      from the child to the parent.  Parents MUST not copy any data if
      any of the validation results any anything other than Validated
      (xxx:ref4034).  Parents MUST NOT copy a DS record.</t>

      <section title="CSYNC record field values">
      </section>
      <section title="Operational Considerations">
      </section>
      <section title="Security Considerations">
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &rfc1034;
      &rfc1035;
      &rfc1995;
      &rfc2119;
      &rfc2136;
      &rfc2845;
      &rfc3007;
      &rfc4033;
      &rfc4034;
      &rfc4035;
      &rfc4509;
      &rfc5011;
      &rfc5155;
    </references>
    <references title="Informative References">
      &rfc1611;
      &rfc1612;
      &rfc2182;
      &rfc3197;
    </references>
    <section title="Deployment Scenarios" anchor="deployment">
      <t>This appendix documents some additional deployment scenarios
	that have been traditionally difficult to manage.  They are
	provided as guidance to protocol developers as data points of
	real-world name server management problems.</t>
      <section title="Non-Standard Zones">
	<t>If an organization uses non-standard zones
	  (for example a purely-local TLD), synchronizing all the
	  name servers for these zones is usually a time-consuming
	  task.  It is made worse when two organizations with
	  conflicting zones merge.  This situation is not a
	  recommended deployment scenario (and is even heavily
	  discouraged) but it is, unfortunately, seen in the wild.</t>

	  <t>It is typically implemented using "forwarding" zones.
	  But there is no way to ensure automatically that all the
	  resolvers have the same set of zones to forward at any given
	  time.  New zones might be added to a local forwarding
	  recursive server, for example, without modifying the rest of
	  the deployed forwarding servers.  It is hoped that
	  a management solution which could handle the configuration
	  of zone forwarding would finally allow management of servers
	  deployed in this fashion.</t>
      </section>
      <section title="Redundancy Sharing">
	<t>For reliability reasons it is recommended that zone
	  operators follow the guidelines documented in <xref
	    target="RFC2182" /> which recommends that multiple name
	  servers be configured for each zone and that the name servers
	  are separated both physically and via connectivity routes.  A
	  common solution is to establish DNS-serving partnerships:
	  "I'll host your zones and you'll host mine".  Both entities
	  benefit from increased DNS reliability via the wider service
	  distribution.  This frequently occurs between cooperating but
	  otherwise unrelated entities (such as between two distinct
	  companies) as well as between affiliated organizations (such as
	  between branch offices within a single company).</t>

	<t> The configuration of these relationships are
	  currently required to be manually configured and maintained.
	  Changes to the list of zones that are cross-hosted are
	  manually negotiated between the cooperating network
	  administrators and configured by hand.  A management
	  protocol with the ability to provide selective
	  authorization, as discussed in Section XXXFUTURE, would
	  solve many of the management difficulties
	    between cooperating organizations.</t>

      </section>
      <section title="DNSSEC Management">
	<t>There are many different DNSSEC deployment strategies that
	may be used for mission-critical zones.  The following list
	describes some example deployment scenarios that might warrant
	different management strategies.
	  <list>
	    <t>All contents and DNSSEC keying information controlled and
	    operated by a single organization
	    </t>
	    <t>Zone contents controlled and operated by one
	    organization, all DNSSEC keying information controlled and
	    operated by a second organization.</t>
	    <t>Zone contents controlled and operated by one
	    organization, zone signing keys (ZSKs) controlled and
	    operated by a second organization, and key signing keys
	    (KSKs) controlled and operated by a third organization.</t>
	  </list>
	</t>
	<t>Although this list is not exhaustive in the potential ways
	that zone data can be divided up, it should be sufficient to
	illustrate the potential ways in which zone data can be
	controlled by multiple entities.</t>

	<t>The end result of all of these strategies, however, will be
	the same: a live zone containing DNSSEC related resource
	records.  Many of the above strategies are merely different
	ways of preparing a zone for serving.  A management solution
	that includes support for managing DNSSEC zone data may wish
	to take into account these potential management scenarios.</t>
      </section>
    </section>
  </back>
</rfc>
